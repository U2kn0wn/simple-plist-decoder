#!/usr/bin/env python3

import os
import sys
import argparse
import plistlib
import json
import base64
from datetime import datetime, date

def normalize(obj):
    if isinstance(obj, dict):
        return {str(k): normalize(v) for k, v in obj.items()}
    if isinstance(obj, list) or isinstance(obj, tuple):
        return [normalize(x) for x in obj]
    if isinstance(obj, (datetime, date)):
        return obj.isoformat()
    if isinstance(obj, bytes):
        return "b64:" + base64.b64encode(obj).decode("ascii")
    if isinstance(obj, (str, int, float, bool)) or obj is None:
        return obj
    try:
        return int(obj)
    except Exception:
        try:
            return float(obj)
        except Exception:
            return str(obj)

def decode_plist_file(path):
    try:
        with open(path, "rb") as f:
            data = plistlib.load(f)
        return normalize(data)
    except Exception as e:
        # Provide helpful context but return None for failure
        return {"__decode_error__": str(e)}

def find_plists(root):
    for dirpath, dirnames, filenames in os.walk(root):
        for fn in filenames:
            if fn.lower().endswith(".plist"):
                yield os.path.join(dirpath, fn)

def main():
    p = argparse.ArgumentParser(description="Decode .plist files recursively and print them.")
    p.add_argument("folder", help="Root folder to search for .plist files")
    p.add_argument("--indent", type=int, default=2, help="JSON indent spaces (default: 2)")
    args = p.parse_args()

    root = args.folder
    if not os.path.isdir(root):
        print(f"Error: not a directory: {root}", file=sys.stderr)
        sys.exit(2)

    found_any = False
    for plist_path in find_plists(root):
        found_any = True
        decoded = decode_plist_file(plist_path)
        # Print path and JSON on following lines (as requested)
        print(plist_path)
        try:
            print(json.dumps(decoded, ensure_ascii=False, indent=args.indent))
        except Exception:
            # As a last fallback, print the Python repr
            print(repr(decoded))
        print()  # blank line between entries

    if not found_any:
        print(f"No .plist files found under: {root}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()

